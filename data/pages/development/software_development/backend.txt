==== Database Model ====

A database backend will drive the BioCatalogue. What sort of metadata will this database hold? Generally, it will be about the users of the system and the services within the system. There are several user types as detailed under [[User Types]]. A good share of the metadata about the users will be built over time and collected automatically. For example, what services they use or whether they have been annotating any services.

==== Pilot Entities ====
----

==  User ==

   * As outline under [[Requirements#user_details]] , the catalogue will provide an authentication mechanism. The database will therefore hold information about the user to enable this. The information held will include:
   * user name / password combination, with password stored in encrypted form
   * email for contact (this could also be used as user name, which would make user names unique)
   * openID
   * First name/Surname

----

== Profile ==

A profile could be created automatically for each registered user, with users encouraged to complete it. The profile information would provide further details about the user. This would include:
  * Institution
  * Academic background
  * Research interests
  * Web page

----

== Web Service ==

 In the case of a soap, a web service would be the envelop of the operations provided by that service and in the case of rest, the base URL to the 'resources' exposed by that service. In the case of soap, the service would:
  * have at least one operation
  * (an operation)take zero or more inputs and may or may not return an output. (It could also be argued that an operation always takes an input and always returns an output)
  * have a location( a wsdl would define such a location )
  * have a purpose, which would be detailed in the description of the service
  * be of one of type SOAP
  * be registered and annotated by some user

----

== Operation/Action ==

The term operation here is not limited to its use in the soap documentation. It is also includes performing an action to expose a REST resource for example. (Maybe we need another term which avoids the potential confusion). An operation cannot exist in isolation. It MUST to be part of a web service. An operation would :
  * have a name
  * belong to some parent service
  * have a description
  * possibly specify some constraints/ require certain resources
  * possible take some inputs and possibly return some output
  * be annotated by some user

Some of this meta data could be harvested at service registration time, say from a wsdl. We could write custom harvesters for that sort of information or explore libraries like soap4r to see if they can be leveraged for such a task
 
----

== Resource ==

Resources are here understood to be the set of dependencies that enable normal functionality of the service. These would include both physical dependencies such as software libraries and logical dependencies such as algorithms

----

== Web Service Type ==
The web service types that the systems would handle in the first instance would be :
  * SOAP
  * REST
  * DAS

There could be other service types in the future but most of the currently existing life science web services fall under these three categories 

----

== Input ==

The metadata about the input could include:
  * name, what is the input called?
  * format, eg fasta
  * how it is used computationally( e.g as a string)
  * description
  * annotations

----

== Output ==

Similar to the metadata collected for inputs,outputs would also have names, format, computational type, 'semantic type',possible mime types, description, references to the operations that generate the kind of output, annotations of the input

----

== Type (Computational, Semantic, Mime) ==

----

== Workflow ==

----

== Tag ==

Freely annotatable entities are essentially taggable. An issue could arise on how appropriate tags are, as they could easily mean different things to different people. There may not be a simple solution to these kinds of conflits, but they may be limited by the use of 'constrained language'. The database however, simply stores tags and could well keep references to who generated the tags.

----

==== Pilot Relationships ====
  * User HAS Profile
  * User REGISTERS  Web Services
  * User INVOKES  Web Services
  * User ANNOTATES/CURATES  Web Services
  * User ANNOTATES/CURATES an Operation/Action
  * User ANNOTATES/CURATES  Inputs
  * User ANNOTATES/CURATES  Outputs
  * Web Service HAS Operations
  * Web Service USES Resources
  * Web Service IS of a certain Type (SOAP,REST, DAS)
  * Web Service IS USED in Workflows
  * Operation/Action HAS Inputs
  * Operation/Action GENERATES Outputs
  * Operation/Action USES Resources
  * Input/Out IS of certain Type (Computational, Semantic, Mime)
  * Tag IS an Annotation

==== Data Integrity ====

The catalogue requires a mechanism to ensure data integrity. This integrity can be enforced at either the database level or the application level or both. There are advantages and disadvantages with the different approaches. The main advantage with enforcing consistency at the application level, is the level of flexibility it then allows to the database. As this is the development phase of the catalogue, there is a very high probably that database will be changing rather often. This would favor defining the consistency constraints at the application level initially and probably (partially or completely)using the DDL level integrity definitions later when the data model becomes fairly stable.




























