====== Annotations Plugin ======

Available here: http://github.com/jits/annotations (with full documentation)

IMPORTANT: you have to create a controller and model for annotations again in your app (but leaving them blank is fine though they can be used to extend the original ones from the plugin. AND use require_dependency (see examples of usage in BioCatalogue).

  * Controller depends on the presence of login_required, logged_in? and current_user methods (these should be in your application controller). The current_user method MUST return nil if no user is currently logged in.

  * Whilst running in development mode, if you get an error such as: "//A copy of ApplicationController has been removed from the module tree but is still active!//", then restart your server. This is due to the way Rails autoloads files in development mode, which affects the plugin and any extensions in the main app (eg: {app_root}/app/models/annotation.rb).

  * Attributes are NOT case-sensitive! (ie: 'description' and 'Description' will be the same AnnotationAttribute entity and therefore all annotations with those will be the same type od annotation).

  * **TODO**: mention how to override controller/models and the purpose of the application controller and application helper and how to get it working in the app.

  * Due to the way the plugin is set up, the reload behaviour of some files in development mode does not work. Specifically, any changes to the application controller and the application helper require restart of the server.

  * //annotation_add_by_popup_link// helper should NOT be used inside a <p> tag since it generates the HTML for the popup box (in a <div>) and places it inline, which would break elements like <p>.

  * When displaying the values of annotations, ALWAYS 'clean' the data using methods like //h// (html escape), //sanitize// and //white_list//.

  * By default, duplicate annotations cannot be created (same value for the same attribute, on an annotatable object, regardless of source). For example: a user cannot add a description to a service that matches an existing description for that service.
    * If you would like to allow duplicate values then use the configuration option: //attribute_names_to_allow_duplicates//
    * NOTE: this is different to the //limits_per_source// config options, which isn't about duplicate annotations, but rather limiting the **quantity** of annotations of a specific attribute on a specific annotatable object by a specific source.

  * When creating annotations, symbols (eg: :tag) can be used for attribute names, BUT symbols cannot be used when finding annotations (Strings representing the attribute names can only be used).

  * To restrict the values for certain annotations, you can either use the **Annotations::Config.value_restrictions** setting and/or extend the Annotation model in your own codebase (see above), and use the ActiveRecord **validates_inclusion_of** validation. For the latter, an example is below:

<code ruby>
require_dependency RAILS_ROOT + '/vendor/plugins/annotations/lib/app/models/annotation'

class Annotation < ActiveRecord::Base
  ...

  validates_inclusion_of :value, 
                         :in => [ "fruit", "nut", "fibre" ], 
                         :message => "Please select a valid category.",
                         :if => Proc.new { |ann| ann.attribute_name.downcase == "category" }

  ...
end 
</code>

===== Dependencies =====

  * <del>Plugin: [[http://github.com/jmckible/version_fu/tree/master|version_fu]]</del> - versioning library is now embedded in the plugin.
  * Gem: [[http://github.com/pluginaweek/plugin_test_helper/tree/master|plugin_test_helper]] (in order to run the tests for the plugin).

===== Versioning =====

Whenever an annotation is updated, a new annotation_version entry is created in the db (corresponding model name = Annotation::Version). 

This uses a library from the version_fu plugin - a slightly customised version of this is embedded within the annotations plugin (which won't conflict if version_fu is installed in the main codebase).

Notes:
  * The "version_creator_id" is only relevant when there are more than one version of an annotation. I.e: for the first version of the annotation the version_creator_id will be nil.

==== Upgrading The Main Codebase to Annotation Versioning ====

  * Shutdown mongrels / servers
  * Do an svn update (annotation versioning was added to the main codebase in revision 388)
  * Run db:migrate
  * Run the ensure_annotations_initial_version.rb script to ensure that the db gets to a consistent state for existing annotations data.

===== Data Model =====

==== Entities ====

=== Annotations ===

Table name: annotations

Fields:
  * id
  * source_type
  * source_id
  * annotatable_type
  * annotatable_id
  * attribute_id
  * value
  * value_type
  * created_at
  * updated_at
  * version
  * version_creator_id

=== Annotation Versions ===

Table name: annotation_versions

Fields:
  * id
  * annotation_id
  * version
  * version_creator_id
  * source_type
  * source_id
  * annotatable_type
  * annotatable_id
  * attribute_id
  * value
  * value_type
  * created_at
  * updated_at

=== Annotation Attributes ===

Table name: annotation_attributes

Fields:
  * id
  * name
  * created_at
  * updated_at

=== Annotation Value Seeds ===

Table name: annotation_value_seeds

Fields:
  * id
  * attribute_id
  * value
  * created_at
  * updated_at


===== TODO =====

===== Examples =====

=== Find annotatable objects that have a specific attribute name AND value: ===

  * Gets all annotatables regardless of type:

  Annotation.find_annotatables_with_attribute_name_and_value("complexity", "O(x^2)")

  * Gets only annotatables that are Books:

  Book.with_annotations_with_attribute_name_and_value("Tag", "Amusing rhetoric")